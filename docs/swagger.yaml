definitions:
  dto.AuthLoginPayload:
    properties:
      password:
        example: ""
        minLength: 3
        type: string
      username:
        example: ""
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  dto.AuthLoginResponse:
    properties:
      token:
        example: ""
        type: string
    type: object
  dto.AuthRegisterDataResponse:
    properties:
      created_at:
        example: ""
        type: string
      id:
        example: ""
        type: string
      name:
        example: ""
        type: string
      updated_at:
        example: ""
        type: string
      username:
        example: ""
        type: string
    type: object
  dto.AuthRegisterPayload:
    properties:
      name:
        example: ""
        minLength: 3
        type: string
      password:
        example: ""
        minLength: 3
        type: string
      username:
        example: ""
        minLength: 3
        type: string
    required:
    - name
    - password
    - username
    type: object
  dto.AuthRegisterResponse:
    properties:
      data:
        $ref: '#/definitions/dto.AuthRegisterDataResponse'
      message:
        example: ""
        type: string
    type: object
  dto.AuthUserDataResponse:
    properties:
      created_at:
        example: ""
        type: string
      id:
        example: ""
        type: string
      name:
        example: ""
        type: string
      updated_at:
        example: ""
        type: string
      username:
        example: ""
        type: string
    type: object
  dto.AuthUserResponse:
    properties:
      data:
        $ref: '#/definitions/dto.AuthUserDataResponse'
      message:
        example: ""
        type: string
    type: object
  dto.UserIndexDataResponse:
    properties:
      created_at:
        example: ""
        type: string
      id:
        example: ""
        type: string
      name:
        example: ""
        type: string
      updated_at:
        example: ""
        type: string
      username:
        example: ""
        type: string
    type: object
  dto.UserIndexResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.UserIndexDataResponse'
        type: array
      message:
        example: ""
        type: string
      pagination:
        $ref: '#/definitions/helper.Paginate'
    type: object
  dto.UserShowDataResponse:
    properties:
      created_at:
        example: ""
        type: string
      id:
        example: ""
        type: string
      name:
        example: ""
        type: string
      updated_at:
        example: ""
        type: string
      username:
        example: ""
        type: string
    type: object
  dto.UserShowResponse:
    properties:
      data:
        $ref: '#/definitions/dto.UserShowDataResponse'
      message:
        example: ""
        type: string
    type: object
  helper.Paginate:
    properties:
      limit:
        example: 0
        type: integer
      page:
        example: 0
        type: integer
      total:
        example: 0
        type: integer
    type: object
info:
  contact: {}
  description: A Tag Service API in Go useing Gin Framework
  title: Tag Service API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.AuthLoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/dto.AuthLoginResponse'
      summary: Login
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.AuthRegisterPayload'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/dto.AuthRegisterResponse'
      summary: Register
      tags:
      - Auth
  /auth/user:
    get:
      consumes:
      - application/json
      description: Get user by auth
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/dto.AuthUserResponse'
      security:
      - BearerAuth: []
      summary: Get user by auth
      tags:
      - Auth
  /user:
    get:
      consumes:
      - application/json
      description: Get users
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: keyword
        in: query
        name: keyword
        type: string
      - description: orderBy
        in: query
        name: orderBy
        type: string
      - description: sortedBy
        in: query
        name: sortedBy
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/dto.UserIndexResponse'
      security:
      - BearerAuth: []
      summary: Get users
      tags:
      - User
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Get user
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/dto.UserShowResponse'
      security:
      - BearerAuth: []
      summary: Get user
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
